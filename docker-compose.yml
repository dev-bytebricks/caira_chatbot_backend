version: "3.8"

services:

  # db:
  #   image: ghcr.io/getzep/postgres:latest
  #   container_name: zep-postgres
  #   restart: on-failure
  #   shm_size: "128mb"  # Increase this if vacuuming fails with a "no space left on device" error
  #   environment:
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=postgres
  #   # build:
  #   #   context: ../zep_memory/zep
  #   #   dockerfile: Dockerfile.postgres
  #   networks:
  #     - zep-network
  #   volumes:
  #     - zep-db:/var/lib/postgresql/data
  #   healthcheck:
  #     test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres" ]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 5

  # nlp:
  #   image: ghcr.io/getzep/zep-nlp-server:latest
  #   container_name: zep-nlp
  #   env_file:
  #     - ../zep_memory/zep/.env # You can set your embedding-related variables here
  #   restart: on-failure
  #   networks:
  #     - zep-network
  #   healthcheck:
  #     test: timeout 10s bash -c ':> /dev/tcp/127.0.0.1/5557' || exit 1
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #     start_period: 45s

  # zep:
  #   image: gdrivechatbot.azurecr.io/customzep:latest
  #   container_name: zep
  #   restart: on-failure
  #   depends_on:
  #       - db
  #       - nlp
  #   ports:
  #       - "8000:8000"
  #   volumes:
  #     - ../zep_memory/zep/config.yaml:/app/config.yaml
  #   environment:
  #     - ZEP_STORE_POSTGRES_DSN=postgres://postgres:postgres@db:5432/postgres?sslmode=disable
  #     - ZEP_NLP_SERVER_URL=http://nlp:5557
  #     - ZEP_EXTRACTORS_DOCUMENTS_EMBEDDINGS_SERVICE=openai
  #     - ZEP_EXTRACTORS_DOCUMENTS_EMBEDDINGS_DIMENSIONS=1536
  #     - ZEP_EXTRACTORS_MESSAGES_EMBEDDINGS_SERVICE=openai
  #     - ZEP_EXTRACTORS_MESSAGES_EMBEDDINGS_DIMENSIONS=1536
  #     - ZEP_EXTRACTORS_MESSAGES_SUMMARIZER_EMBEDDINGS_SERVICE=openai
  #     - ZEP_EXTRACTORS_MESSAGES_SUMMARIZER_EMBEDDINGS_DIMENSIONS=1536
  #   env_file:
  #     - ../zep_memory/zep/.env # Store your OpenAI API key here as ZEP_OPENAI_API_KEY
  #   # build:
  #   #   context: ../zep_memory/zep
  #   #   dockerfile: Dockerfile
  #   healthcheck:
  #     test: timeout 10s bash -c ':> /dev/tcp/127.0.0.1/8000' || exit 1
  #     interval: 5s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 40s
  #   networks:
  #     - zep-network
####################################################################     
  fastapi-service:
    build:
      context: .
      dockerfile: Dockerfile
    image: fastapi
    container_name: fastapi
    restart: unless-stopped
    # depends_on:
    #   - zep
    ports:
      - "8001:8001"
    networks:
      - zep-network
    env_file:
      - ./.env
    volumes:
      - .:/app/

  smtp-service:
    image: axllent/mailpit
    restart: unless-stopped
    container_name: smtp
    networks:
      - zep-network
    ports:
      - "8025:8025"
      - "1025:1025"
  
  mysql-service:
    image: mysql/mysql-server:8.0.32
    command: ["--default-authentication-plugin=mysql_native_password"]
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: $MYSQL_PASSWORD
      MYSQL_ROOT_HOST: '%'
      MYSQL_DATABASE: $MYSQL_DB
      MYSQL_PORT: $MYSQL_PORT
    networks:
      - zep-network
    volumes:
      - mysql_db:/var/lib/mysql

  adminer-service:
    image: adminer:latest
    restart: unless-stopped
    container_name: adminer
    depends_on:
      - mysql-service
    networks:
      - zep-network
    ports:
      - "8080:8080"
  
networks:
  zep-network:
    name: cairabackend_zep-network
    driver: bridge
volumes:
  zep-db:
  mysql_db:
